{"version":3,"sources":["views/Home/components/CardValue.tsx","views/Home/components/KiwiStats.tsx","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/KiwiHarvestBalance.tsx","views/Home/components/KiwiWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/KiwiWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/Home.tsx"],"names":["CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","StyledKiwiStats","styled","Card","Row","div","KiwiStats","TranslateString","useI18n","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","getKiwiAddress","kiwiSupply","getBalanceNumber","size","mb","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","KiwiHarvestBalance","earningsSum","reduce","accum","earning","pow","toNumber","color","style","lineHeight","KiwiWalletBalance","kiwiBalance","useTokenBalance","StyledFarmStakingCard","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","KiwiWinnings","claimAmount","useTotalClaim","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","toLocaleString","maximumFractionDigits","StyledLotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requesteClaim","setRequestedClaim","onMultiClaim","useMultiClaimLottery","handleClaim","console","error","useModal","max","tokenName","onPresentBuy","marginRight","variant","StyledPartnerCard","StyledLink","Link","PartnerCard","href","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard","LotteryCard","TotalValueLockedCard"],"mappings":"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","file":"static/js/13.4892e658.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@kiwifinancebsc/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@kiwifinancebsc/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getKiwiAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledKiwiStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst KiwiStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getKiwiAddress())\n  const kiwiSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledKiwiStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Kiwi Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total KIWI Supply')}</Text>\n          {kiwiSupply && <CardValue fontSize=\"14px\" decimals={1} value={kiwiSupply} />}\n        </Row>\n          <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total KIWI Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={1} value={234764} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New KIWI/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={1} value={2.5} />\n        </Row>\n      </CardBody>\n    </StyledKiwiStats>\n  )\n}\n\nexport default KiwiStats\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingKiwi',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingKiwi',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@kiwifinancebsc/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst KiwiHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default KiwiHarvestBalance\n","import React from 'react'\nimport { Text } from '@kiwifinancebsc/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getKiwiAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst KiwiWalletBalance = () => {\n  const TranslateString = useI18n()\n  const kiwiBalance = useTokenBalance(getKiwiAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(kiwiBalance)} fontSize=\"24px\" />\n}\n\nexport default KiwiWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@kiwifinancebsc/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport KiwiHarvestBalance from './KiwiHarvestBalance'\nimport KiwiWalletBalance from './KiwiWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/kiwi-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/kiwi.svg\" alt=\"kiwi logo\" width={64} height={64} />\n        <Block>\n          <KiwiHarvestBalance />\n          <Label>{TranslateString(544, 'KIWI to Harvest')}</Label>\n        </Block>\n        <Block>\n          <KiwiWalletBalance />\n          <Label>{TranslateString(546, 'KIWI in Wallet')}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting KIWI')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst KiwiWinnings = () => {\n  const { claimAmount } = useTotalClaim()\n  return <CardValue value={getBalanceNumber(claimAmount)} />\n}\n\nexport default KiwiWinnings\n","import React from 'react'\nimport { Text } from '@kiwifinancebsc/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\n\nconst LotteryJackpot = () => {\n  const lotteryPrizeAmount = useTotalRewards()\n\n  return (\n    <Text bold fontSize=\"24px\">\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\n        maximumFractionDigits: 2,\n      })}\n    </Text>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@kiwifinancebsc/uikit'\nimport { getKiwiAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\n\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport KiwiWinnings from './KiwiWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\nconst Block = styled.div`\n margin-bottom: 16px;\n`\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\nconst Label = styled.div`\ncolor: ${({ theme }) => theme.colors.textSubtle};\n font-size: 14px;\n`\nconst Actions = styled.div`\n display: flex;\n margin-top: 24px;\n button {\n   flex: 1 0 50%;\n }\n `\n\nconst FarmedStakingCard = () => {\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requesteClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const { claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n\n  const kiwiBalance = useTokenBalance(getKiwiAddress())\n\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim])\n\n  const [onPresentBuy] = useModal(<BuyModal max={kiwiBalance} tokenName=\"KIWI\" />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n      <Heading size=\"xl\" mb=\"24px\">\n        {TranslateString(550, 'KIWI Lottery Desk')}\n      </Heading>\n      <CardImage src=\"/images/ticket.svg\" alt=\"Kiwi ticket logo\" width={64} height={64} />\n      <Block>\n        <KiwiWinnings />\n        <Label>{TranslateString(552, 'KIWI to Collect')}</Label>\n      </Block>\n      <Block>\n        <LotteryJackpot />\n        <Label>{TranslateString(554, 'Lottery is Turned Off Now!!!')}</Label>\n      </Block>\n      <Actions>\n        <Button\n          id=\"dashboard-collect-winnings\"\n          disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\n          onClick={handleClaim}\n          style={{ marginRight: '8px' }}\n        >\n          {TranslateString(556, 'Collect Winnings')}\n        </Button>\n        <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\n          {TranslateString(558, 'No Tickets')}\n        </Button>\n      </Actions>\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Link } from '@kiwifinancebsc/uikit'\nimport useI18n from 'hooks/useI18n'\n// import { useGetStats } from 'hooks/api'\n\nconst StyledPartnerCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\nconst CardImage = styled.img`\n  margin: 2px;\n`\nconst StyledLink = styled(Link)`\n  align-self: center;\n  margin-top: 16px;\n`\n\nconst PartnerCard = () => {\n  const TranslateString = useI18n()\n//  const data = useGetStats()\n//  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledPartnerCard>\n      <CardBody>\n      <Heading size=\"xl\" mb=\"24px\">\n        {TranslateString(550, ' Partner')}\n      </Heading>\n        <StyledLink href=\"https://cheeseswap.app/\">\n          <CardImage src=\"/images/cheeseswap.svg\" alt=\"CheeseSwap logo\" width={180} />\n        </StyledLink>\n      </CardBody>\n    </StyledPartnerCard>\n  )\n}\n\nexport default PartnerCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@kiwifinancebsc/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport KiwiStats from './components/KiwiStats'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport EarnAPYCard from './components/EarnAPYCard'\nimport EarnAssetCard from './components/EarnAssetCard'\nimport WinCard from './components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/home-bg.svg'), url('/images/home-bg2.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'KiwiFinance')}\n        </Heading>\n        <Text>{TranslateString(578, 'The Best Modern Yield Farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n      <Cards>\n        <FarmStakingCard />\n        <LotteryCard />\n      </Cards>\n        <Cards>\n        <KiwiStats />\n        <TotalValueLockedCard />\n      </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}